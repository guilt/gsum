package file

import (
	"bufio"
	"fmt"
	"os"
	"sort"
	"strings"
	"time"

	"github.com/guilt/gsum/pkg/common"
)

// CheckSumSpec represents a parsed checksum line, including hash value, file range, and expected byte count.
type CheckSumSpec struct {
	HashValue         string
	FileAndRange      common.FileAndRangeSpec
	ExpectedByteCount int64
}

// ParseChecksumLineFunc defines a function type for parsing a checksum line into its components.
type ParseChecksumLineFunc func(line string) (hashValue string, fileAndRange common.FileAndRangeSpec, byteCount int64, err error)

// WriteChecksums writes a batch of checksums to the specified hash file.
// If addComment is true, writes a comment header once at the top.
func WriteChecksums(hashFile string, pairs []CheckSumSpec, addComment bool) error {
	if len(pairs) == 0 {
		return nil
	}
	f, err := os.Create(hashFile)
	if err != nil {
		return fmt.Errorf("failed to create output file: %s", err)
	}
	defer f.Close()

	timeNow := time.Now().Format(time.RFC3339)

	sort.Slice(pairs, func(i, j int) bool {
		return common.LessFileAndRange(pairs[i].FileAndRange, pairs[j].FileAndRange)
	})
	if addComment {
		fmt.Fprintf(f, "# Generated by gsum on %s\n", timeNow)
	}
	for _, p := range pairs {
		fmt.Fprintf(f, "%s %d %s\n", p.HashValue, p.ExpectedByteCount, p.FileAndRange.String())
	}
	return nil
}

// ParseChecksums loads all checksums from the provided hash files using the given parse function.
func ParseChecksums(parseLine ParseChecksumLineFunc, hashFiles []string) ([]CheckSumSpec, error) {
	var checksums []CheckSumSpec
	for _, hashFile := range hashFiles {
		fh, err := os.Open(hashFile)
		if err != nil {
			return nil, fmt.Errorf("error opening hash file %s: %w", hashFile, err)
		}
		defer fh.Close()

		scanner := bufio.NewScanner(fh)
		for scanner.Scan() {
			line := strings.TrimSpace(scanner.Text())
			if line == "" || strings.HasPrefix(line, "#") {
				continue
			}
			hashValue, fileAndRange, byteCount, err := parseLine(line)
			if err != nil {
				return nil, fmt.Errorf("invalid checksum line in %s: %q: %w", hashFile, line, err)
			}
			checksums = append(checksums, CheckSumSpec{
				HashValue:         hashValue,
				FileAndRange:      fileAndRange,
				ExpectedByteCount: byteCount,
			})
		}
		if err := scanner.Err(); err != nil {
			return nil, fmt.Errorf("error reading hash file %s: %w", hashFile, err)
		}
	}
	return checksums, nil
}
